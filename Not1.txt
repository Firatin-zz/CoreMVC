*Asp.net core ile ilk tanýþmam olacak allaým çok heyecanlýyým. Nasýl biri acaba? Güzel mi? Ya ilk tanýþmada pc donarsa? Ya internet hýzý düþerse oww naparým? Neyse olumsuz düþünmeyeyeim þimdi.(01.04.2017 13:48)
*Þuan tanýþtk Bana welcome dedi düþünebiliyor musunuz? Ne demek welcome, asýl sen welcome.
*Ýlk olarak entities katmaný oluþturuyoruz. Halen ön konuþma tarzýnda bir tanýþma safhasýndayýz.
	+Concrete: Somut nesnelerimizi tutucaz. Yani tablolarýmýzýn calslarýný, yani DataModelleri tutuyor olacaðýz.
	+Oto generatörlerle daha kolay modeller alýnabilir. Bunlardan biri Devart

*Ýlk veritabaný nesnemize IEntity verip Core katmanýnda entityklasör oluþturup altýna ilk interfacemizi IEntity adýyla oluþturduk. Verimodellerimize interfeyzimizi tanýttýk

**DataAcces katmanýna üçüncü olarak geçtik. Veri eriþim katmandýr. Sql ile alakalý iþlemler burda yapýlýr. Crud ve diðer iþlemler buradadýr. DB ye burdan eriþilir. Solid'in D'si, en alt katmandýr.
	+Abstract'ta ORM kullanýlmaz. Ýþ katmanýyla iletiþim kuracaktýr. Çünkü ORM deðiþtirmeye imkan sunar.
	+concrete yine somut nesneler tutulur. ORM burda kullanýlýr.
(Core katman>)	+Bütün crud iþlemleri bütün veri modellerinde olacaðý için bu operasyonu generic olacaðý için core katmanýnda Repositry oluþturarak yapýyoruz. Dataacces klasörü içine IEntityRepo oluþturuyoruz. Crud iþlemler ile alakalý herþey oraya gönderilecek. Devamý orda açýklandý.
(Core Katman>)	+Core katmanýna entityklasörü açtýk. Entity biz bu ORm kullanmak istediðimizde kullanýcaz. Mesela baþka teknolojiye geçicez Ado veya Hibernate o zaman onlar için klasör oluþturup onlarý kullanýcaz.
	*Abstract clasýna her bir veri nesnemiz için Interface oluþturabiliriz. Burda IEntityRepository kalýtým verilir. Boylece IEntityRepository 'de var olan kurallar zaten bu nesneler için oluþmuþ olur fakat diyelim ki category için farklý bir operasyon yani iþlem vs gerekir onuda buraya yaparýz.

	+Concrete klasörümüze kullanacaðýmýz teknolojiyi ekliyoruz. yine ilerde orm aracýmýzý deðiþtirebiliriz diye bu klasör içinede EfProductDal clasýmýzý ekledik. burda EF operasyonlarý yönetilecek.


	**Business Katmaný iþ katmanýdýr. Ýþ kurallarýnýn kodlandýgý ve süreçlerin yönetildiðim katmandýr. Mesela loglama catche güvenlik operasyonlarý. Session burada çaðrýlamaz


	**Arayüz mvc katmaNINA geçiyoruz. Ýþ katmanýndaki kodlar arayüze yazýlmasý en büyük hatadýr. Mesela servis ile mobil uygulamaya destek vermek istersek sorun yaþarýz. 



	-------------------------------------------Core----------------
	**+StartUp.cs : Burasý olayýn baþladýðý yer. 
	+ConfigureServices içerisinde servis baðýmlýlýklarý eklenir. Örn Dependency injection burda uygulanýr.Dedik ki; eðer senden IProductService(IPS) istenirse sen bir tane ProductManager(PM)newleyerek oluþtur ve gönder çünkü Solid kuralýnda böyle olmasý gerekir.
	-Controllerda ctor sonrasý servislerimizi ekledik.

	-AddScopped : X Kullanýcý IPS istediðinde bulunduðunda X için bir PM oluþturulup her istekte oluþturulan PM gönderilir, farklý bir Y kullanýcýnýn IPS istediðinde de onun için yeni bir PM oluþturulup her çaðýrmada o Pm gönderilir.

	-AddTransient: AddScope ile ayný küçük farklýlýklar vardýr. X kullanýcý her ProductController istediðinde yeni bir PM oluþturulur. Y Kullanýcý içinde her istekte yeni bir PM oluþturulur.
	
	-AddSingleton : X kullanýcý ProductController isteði gönderdiðinde bir PM oluþturulur. Y kullanýcýsý da ProductController isteði gönderdiðinde X için oluþturulan ayný PM instance kullanýlýr.
	
	




	+Configure performans artýþý burda saðlanýr. Hata yakalama, loglama süreçleri vs middle vaiereler burda yazýlýr.

	**NOT: :Net core'da partial viewlar yerine view componentler gelmiþtir.


	**+ Kendi tag helperimizi sayfalama vesaire olarak kullanmak için PagingTagHelpers clasý altýnda yazdýk. Ýndex view'da using olarak @addTagHelper"*,xx"" eklemek ve diðer sayfalarda ayný iþlemi yapmak yerine bir tane 'MVC views import page' ekleyip orda tanýmlayarak her yerde kullana bileceðiz.
